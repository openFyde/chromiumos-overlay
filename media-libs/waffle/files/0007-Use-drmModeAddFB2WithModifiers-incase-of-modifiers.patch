From b7ea81006f4876013723f194b755b55137b929c7 Mon Sep 17 00:00:00 2001
From: Sushma Venkatesh Reddy <sushma.venkatesh.reddy@intel.com>
Date: Wed, 14 Dec 2022 12:41:01 -0800
Subject: [PATCH] Use drmModeAddFB2WithModifiers incase of modifiers

If we need to pass modifiers to DRM/KMS when adding the framebuffer for
a BO, drmModeAddFB2WithModifiers needs to be utilized.

Signed-off-by: Sushma Venkatesh Reddy <sushma.venkatesh.reddy@intel.com>
---
 src/waffle/gbm/wgbm_platform.h |  1 +
 src/waffle/null/wnull_buffer.c | 59 +++++++++++++++++++++++++++-------
 2 files changed, 49 insertions(+), 11 deletions(-)

diff --git a/src/waffle/gbm/wgbm_platform.h b/src/waffle/gbm/wgbm_platform.h
index 20d3b796ce59..6294a1c52fb2 100644
--- a/src/waffle/gbm/wgbm_platform.h
+++ b/src/waffle/gbm/wgbm_platform.h
@@ -48,6 +48,7 @@
     f(uint32_t            , gbm_bo_get_width             , (struct gbm_bo *bo)) \
     f(uint32_t            , gbm_bo_get_height            , (struct gbm_bo *bo)) \
     f(uint32_t            , gbm_bo_get_stride            , (struct gbm_bo *bo)) \
+    f(uint32_t            , gbm_bo_get_offset            , (struct gbm_bo *bo, size_t plane)); \
     f(uint32_t            , gbm_bo_get_format            , (struct gbm_bo *bo)) \
     f(uint64_t            , gbm_bo_get_modifier   , (struct gbm_bo *bo)) \
     f(union gbm_bo_handle , gbm_bo_get_handle            , (struct gbm_bo *bo)) \
diff --git a/src/waffle/null/wnull_buffer.c b/src/waffle/null/wnull_buffer.c
index 4af51dc1410c..f073236fb851 100644
--- a/src/waffle/null/wnull_buffer.c
+++ b/src/waffle/null/wnull_buffer.c
@@ -99,6 +99,22 @@ slbuf_stride(struct slbuf *self)
     return self->f->gbm_bo_get_stride(bo);
 }
 
+static uint32_t
+slbuf_offset(struct slbuf *self)
+{
+    struct gbm_bo *bo = slbuf_get_bo(self);
+    assert(bo);
+    return self->f->gbm_bo_get_offset(bo, 0u);
+}
+
+static uint64_t
+slbuf_modifier(struct slbuf *self)
+{
+    struct gbm_bo *bo = slbuf_get_bo(self);
+    assert(bo);
+    return self->f->gbm_bo_get_modifier(bo);
+}
+
 static uint32_t
 slbuf_handle(struct slbuf *self)
 {
@@ -111,17 +127,38 @@ bool
 slbuf_get_drmfb(struct slbuf *self, uint32_t *fb)
 {
     if (!self->has_drmfb) {
-        if (drmModeAddFB(slbuf_drmfd(self),
-                          self->p->width,
-                          self->p->height,
-                          24, 32,
-                          slbuf_stride(self),
-                          slbuf_handle(self),
-                          &self->drmfb)) {
-            prt("drmModeAddFB failed\n");
-            return false;
-        }
-        self->has_drmfb = true;
+	    prt("adding a DRM/KMS framebuffer\n");
+	    if (slbuf_modifier(self)) {
+		    const uint32_t bo_handles[4] = {slbuf_handle(self), 0u, 0u, 0u};
+		    const uint32_t pitches[4] = {slbuf_stride(self), 0u, 0u, 0u};
+		    const uint32_t offsets[4] = {slbuf_offset(self), 0u, 0u, 0u};
+		    const uint64_t modifiers[4] = {slbuf_modifier(self), 0u, 0u, 0u};
+		    if (drmModeAddFB2WithModifiers(slbuf_drmfd(self),
+					    self->p->width,
+					    self->p->height,
+					    self->p->gbm_format,
+					    bo_handles,
+					    pitches,
+					    offsets,
+					    modifiers,
+					    &self->drmfb,
+					    DRM_MODE_FB_MODIFIERS)) {
+			    prt("drmModeAddFB2WithModifiers failed\n");
+			    return false;
+		    }
+	    } else {
+		    if (drmModeAddFB(slbuf_drmfd(self),
+					    self->p->width,
+					    self->p->height,
+					    24, 32,
+					    slbuf_stride(self),
+					    slbuf_handle(self),
+					    &self->drmfb)) {
+			    prt("drmModeAddFB failed\n");
+			    return false;
+		    }
+	    }
+	    self->has_drmfb = true;
     }
     *fb = self->drmfb;
     return true;
-- 
2.34.1

