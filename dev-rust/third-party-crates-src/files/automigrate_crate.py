#!/usr/bin/env python3
# Copyright 2022 The ChromiumOS Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Automigrates a single crate to dev-rust/third-party-crates.

FIXME(b/240953811): Remove this once our migration is done.
"""

import argparse
import logging
from pathlib import Path
import sys
from typing import List, Optional

import migration_utils


EMPTY_CRATE_REPLACEMENT = """\
# Copyright 2022 The ChromiumOS Authors.
# Distributed under the terms of the GNU General Public License v2

EAPI="7"

DESCRIPTION="Empty crate"
HOMEPAGE=""

LICENSE="metapackage"
SLOT="${PV}"
KEYWORDS="*"

DEPEND="dev-rust/third-party-crates-src:="
RDEPEND="${DEPEND}"
"""


def index_line_starting_with(lines: List[str], elem: str) -> int:
    """Returns the first index in `lines` that starts with `elem`."""
    for i, line in enumerate(lines):
        if line.startswith(elem):
            return i
    raise ValueError(f"No line starting with {elem!r} found")


def update_third_party_crates_ebuild_contents(
    contents: str, subsumed_ebuild_stem: str, revision: Optional[int]
) -> str:
    """Computes new contents for dev-rust/third-party-crates-src."""
    third_party_crates_lines = [x.rstrip() for x in contents.splitlines()]

    base_rdepend_constraint = f"\t!=dev-rust/{subsumed_ebuild_stem}"
    rdepend_constraints = [base_rdepend_constraint]
    if revision:
        for i in range(1, revision + 1):
            rdepend_constraints.append(f"{base_rdepend_constraint}-r{i}")

    rdepend_index = index_line_starting_with(
        third_party_crates_lines,
        'RDEPEND="',
    )

    return "\n".join(
        third_party_crates_lines[: rdepend_index + 1]
        + rdepend_constraints
        + third_party_crates_lines[rdepend_index + 1 :]
    )


def emptify_ebuild_contents(ebuild_contents: str) -> str:
    """Computes new contents for the given ebuild."""
    if "CROS_RUST_EMPTY_CRATE=" in ebuild_contents:
        return EMPTY_CRATE_REPLACEMENT

    ebuild_lines = [x.rstrip() for x in ebuild_contents.splitlines()]

    # We don't need to inherit cros-rust anymore, since third-party-crates-src
    # does that for us.
    i = index_line_starting_with(ebuild_lines, "inherit ")
    inherit_line = ebuild_lines[i]
    if " cros-rust" not in inherit_line:
        raise ValueError(f"cros-rust not found in {inherit_line}")
    inherit_line = inherit_line.replace(" cros-rust", "", 1)
    if inherit_line.strip() == "inherit":
        del ebuild_lines[i]
        assert i != 0
        if not ebuild_lines[i - 1].strip():
            while i < len(ebuild_lines) and not ebuild_lines[i].strip():
                # Sometimes we have `\ninherit\n`; clean up the extra spacing.
                # This is n^2, but n should be <100, and this script is made to
                # be thrown away.
                del ebuild_lines[i]
    else:
        ebuild_lines[i] = inherit_line

    # Ensure our description is descriptive.
    i = index_line_starting_with(ebuild_lines, "DESCRIPTION=")
    ebuild_lines.insert(i, migration_utils.MIGRATED_CRATE_MARKER)
    i += 1

    # Delete the existing description. This is kind of ugly and very incorrect
    # in general, but seems to match our style well enough.
    quote_style = ebuild_lines[i][len("DESCRIPTION=")]
    if ebuild_lines[i] == "DESCRIPTION=" + quote_style:
        del ebuild_lines[i]
    while not ebuild_lines[i].endswith(quote_style):
        del ebuild_lines[i]
    ebuild_lines[i] = 'DESCRIPTION="Replaced by third-party-crates-src."'

    # Licenses are now listed by third-party-crates-src.
    i = index_line_starting_with(ebuild_lines, 'LICENSE="')
    ebuild_lines[i] = 'LICENSE="metapackage"'

    # No need to download anything anymore for this package.
    i = index_line_starting_with(ebuild_lines, 'SRC_URI="')
    del ebuild_lines[i]

    def delete_if_exists(prefix):
        """Deletes a line starting with |prefix| if it exists."""
        try:
            i = index_line_starting_with(ebuild_lines, prefix)
            del ebuild_lines[i]
        except ValueError:
            pass

    delete_if_exists("HOMEPAGE=")
    delete_if_exists("CROS_RUST_REMOVE_DEV_DEPS=")
    delete_if_exists("CROS_RUST_REMOVE_TARGET_CFG=")
    delete_if_exists(
        "# This file was automatically generated by cargo2ebuild.py"
    )

    # Aaand make sure DEPEND works. We add to DEPEND instead of replacing it,
    # since adding to it makes incremental migration easier.
    try:
        i = index_line_starting_with(ebuild_lines, 'DEPEND="')
    except ValueError:
        i = None

    third_party_crates_dep = "dev-rust/third-party-crates-src:="
    if i is None:
        ebuild_lines.append(f'DEPEND="{third_party_crates_dep}"')
    else:
        depend_line = ebuild_lines[i]
        # ... Fancy quote escaping isn't supported. Assume it's not there.
        num_quotes = depend_line.count('"')
        assert num_quotes <= 2, depend_line
        if num_quotes == 1:
            # Assume dependencies are one per line, which is the nice and easy
            # case.
            ebuild_lines.insert(i + 1, f"\t{third_party_crates_dep}")
        else:
            # Otherwise, _make_ them one per line.
            dependency = depend_line.split('"')[1]
            depend_lines = [
                'DEPEND="',
                f"\t{third_party_crates_dep}",
                f"\t{dependency}",
                '"',
            ]
            ebuild_lines = (
                ebuild_lines[:i] + depend_lines + ebuild_lines[i + 1 :]
            )

    try:
        # Just ensure that RDEPEND exists. If not, add it.
        index_line_starting_with(ebuild_lines, "RDEPEND=")
    except ValueError:
        ebuild_lines.append('RDEPEND="${DEPEND}"')

    return "\n".join(ebuild_lines).rstrip() + "\n"


def get_parser():
    """Constructs our arg parser."""
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument("--ebuild-path", type=Path, required=True)
    parser.add_argument("--dry-run", action="store_true")
    parser.add_argument(
        "--third-party-crates-ebuild",
        type=Path,
        default=Path(__file__).resolve().parent.parent
        / "third-party-crates-src-9999.ebuild",
    )
    return parser


def main(argv: List[str]):
    """Main function."""
    logging.basicConfig(
        format=">> %(asctime)s: %(levelname)s: %(filename)s:%(lineno)d: "
        "%(message)s",
        level=logging.INFO,
    )

    opts = get_parser().parse_args(argv)
    ebuild_path = opts.ebuild_path
    ebuild_contents = ebuild_path.read_text(encoding="utf-8")

    if migration_utils.MIGRATED_CRATE_MARKER in ebuild_contents:
        logging.info("Ebuild is already migrated; ignoring")
        return

    third_party_crates_ebuild = opts.third_party_crates_ebuild

    stem_no_rev, revision = migration_utils.parse_crate_from_ebuild_stem(
        ebuild_path.stem
    )
    if revision:
        # Convert from e.g., "r1" to simply the revision number.
        revision = int(revision[1:])
    if migration_utils.crate_has_customization(ebuild_contents):
        sys.exit("Crate has custom patches/functions. Cowardly exiting.")

    logging.info("Ebuild checks out; determining new contents.")
    new_contents = emptify_ebuild_contents(ebuild_contents)

    logging.info("Updating third-party-crates...")
    new_third_party_crates_contents = update_third_party_crates_ebuild_contents(
        third_party_crates_ebuild.read_text(encoding="utf-8"),
        stem_no_rev,
        revision,
    )

    if opts.dry_run:
        logging.info("Dry-run specified. Printing would-be actions:")
        logging.info(
            "Would write the following to %s:\n%s",
            ebuild_path,
            new_contents,
        )
        logging.info(
            "Would rewrite third-party crates with the following:\n%s",
            new_third_party_crates_contents,
        )
    else:
        logging.info("Writing new ebuild...")
        ebuild_path.write_text(new_contents, encoding="utf-8")
        third_party_crates_ebuild.write_text(
            new_third_party_crates_contents,
            encoding="utf-8",
        )


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
