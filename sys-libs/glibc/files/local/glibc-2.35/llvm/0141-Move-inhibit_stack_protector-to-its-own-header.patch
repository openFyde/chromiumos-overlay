From 3c23911a0f157d4bce8120b83331ae117aa11482 Mon Sep 17 00:00:00 2001
From: Adhemerval Zanella <adhemerval.zanella@linaro.org>
Date: Thu, 25 Aug 2022 09:47:31 -0300
Subject: [PATCH 141/163] Move inhibit_stack_protector to its own header

It is used on tests as well.
---
 include/libc-symbols.h   | 15 +--------------
 include/stackprotector.h | 38 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 39 insertions(+), 14 deletions(-)
 create mode 100644 include/stackprotector.h

diff --git a/include/libc-symbols.h b/include/libc-symbols.h
index b543e0019f..62eceeaadf 100644
--- a/include/libc-symbols.h
+++ b/include/libc-symbols.h
@@ -87,6 +87,7 @@
 /* Obtain the definition of symbol_version_reference.  */
 #include <libc-symver.h>
 #include <libc-diag.h>
+#include <stackprotector.h>
 
 /* When PIC is defined and SHARED isn't defined, we are building PIE
    by default.  */
@@ -446,20 +447,6 @@ for linking")
 #define attribute_relro __attribute__ ((section (".data.rel.ro")))
 
 
-/* Used to disable stack protection in sensitive places, like ifunc
-   resolvers and early static TLS init.  */
-#ifdef HAVE_CC_NO_STACK_PROTECTOR
-# ifdef __clang__
-#  define inhibit_stack_protector \
-     __attribute__((no_stack_protector))
-# else
-#  define inhibit_stack_protector \
-    __attribute__ ((__optimize__ ("-fno-stack-protector")))
-# endif
-#else
-# define inhibit_stack_protector
-#endif
-
 /* The following macros are used for PLT bypassing within libc.so
    (and if needed other libraries similarly).
    First of all, you need to have the function prototyped somewhere,
diff --git a/include/stackprotector.h b/include/stackprotector.h
new file mode 100644
index 0000000000..10230bac06
--- /dev/null
+++ b/include/stackprotector.h
@@ -0,0 +1,38 @@
+/* Details about stack protection enablement and how to disable it.
+   Copyright (C) 2022 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#ifndef _INCLUDE_STACKPROTECTOR_H
+#define _INCLUDE_STACKPROTECTOR_H
+
+#include <config.h>
+
+/* Used to disable stack protection in sensitive places, like ifunc
+   resolvers and early static TLS init.  */
+#ifdef HAVE_CC_NO_STACK_PROTECTOR
+# ifdef __clang__
+#  define inhibit_stack_protector \
+     __attribute__((no_stack_protector))
+# else
+#  define inhibit_stack_protector \
+    __attribute__ ((__optimize__ ("-fno-stack-protector")))
+# endif
+#else
+# define inhibit_stack_protector
+#endif
+
+#endif
-- 
2.37.2

