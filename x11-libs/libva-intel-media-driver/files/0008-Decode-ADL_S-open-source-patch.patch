From 93dbe8e07b95ab51dea7d9e95325ed282c8d5023 Mon Sep 17 00:00:00 2001
From: huangli2018 <li.h.huang@intel.com>
Date: Thu, 24 Dec 2020 13:59:41 +0800
Subject: [PATCH 1/2] ADL_S open source patch

ADL_S open source patch
gmm open source patch:2072b0d1e8ba2cba2f94bc2c1fda89d6e457a50b
---
 README.md                                     |   6 +-
 docs/media_features.md                        |  11 +-
 .../cmake/linux/media_gen_flags_linux.cmake   |   8 ++
 .../linux/gen12/ddi/media_libva_caps_g12.cpp  |  10 ++
 .../linux/gen12/ddi/media_sku_wa_g12.cpp      |  50 +++++++++
 .../linux/gen12/ddi/media_sysinfo_g12.cpp     |  69 ++++++++++++
 .../media_interfaces_g12_adls.cpp             | 101 ++++++++++++++++++
 .../media_interfaces_g12_adls.h               |  44 ++++++++
 .../media_srcs.cmake                          |  49 +++++++++
 media_driver/media_interface/media_srcs.cmake |   4 +
 10 files changed, 346 insertions(+), 6 deletions(-)
 create mode 100644 media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.cpp
 create mode 100644 media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.h
 create mode 100644 media_driver/media_interface/media_interfaces_m12_adls/media_srcs.cmake

diff --git a/README.md b/README.md
index 470d3b5f98ec..e8873fef0474 100755
--- a/README.md
+++ b/README.md
@@ -99,7 +99,8 @@ Media driver supports two build types as below
 
 ### Decoding/Encoding Features
 
-|CODEC | Build Types | BDW | SKL | BXT/APL | KBLx | ICL | EHL/JSL | TGL/RKL | DG1/SG1 |
+
+|CODEC | Build Types | BDW | SKL | BXT/APL | KBLx | ICL | EHL/JSL | TGL/RKL/ADL-S | DG1/SG1 |
 |---|---|---|---|---|---|---|---|---|---|
 | AVC | <u>Full-Feature</u><br><i>Free-Kernel</i> | <u>D/Es</u><br><i>D<i> | <u>D/E/Es</u><br><i>D/E<i> | <u>D/E/Es</u><br><i>D/E<i> | <u>D/E/Es</u><br><i>D/E<i> | <u>D/E/Es</u><br><i>D/E<i> | <u>D/E</u><br><i>D/E<i> | <u>D/E/Es</u><br><i>D/E<i> | <u>D/E/Es</u><br><i>D/E<i> |
 | MPEG-2 | <u>Full-Feature</u><br><i>Free-Kernel</i> | <u>D/Es</u><br><i>D<i> | <u>D/Es</u><br><i>D<i> | <u>D</u><br><i>D<i> | <u>D/Es</u><br><i>D<i> | <u>D/Es</u><br><i>D<i> | <u>D</u><br><i>D<i> | <u>D/Es</u><br><i>D<i> | <u>D/Es</u><br><i>D<i> |
@@ -139,7 +140,8 @@ For more information, please refer to
 
 ### Video Processing Features
 
-| Features | Build Types | BDW | SKL | BXT/APL | KBLx | ICL | EHL/JSL | TGL/RKL | DG1/SG1 |
+
+| Features | Build Types | BDW | SKL | BXT/APL | KBLx | ICL | EHL/JSL | TGL/RKL/ADL-S | DG1/SG1 |
 |---|---|---|---|---|----|---|---|---|---|
 | Blending | <u>Full-Feature</u><br><i>Free-Kernel</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>Yes</i> | <u>Yes</u><br><i>Yes</i> | <u>Yes</u><br><i>Yes</i> | <u>Yes</u><br><i>Yes</i> |
 | CSC<br>(Color Space Conversion) | <u>Full-Feature</u><br><i>Free-Kernel</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>&nbsp;</i> | <u>Yes</u><br><i>Yes</i> | <u>Yes</u><br><i>Yes</i> | <u>Yes</u><br><i>Yes</i> | <u>Yes</u><br><i>Yes</i> |
diff --git a/docs/media_features.md b/docs/media_features.md
index b90c438ed989..6d40f9f162af 100644
--- a/docs/media_features.md
+++ b/docs/media_features.md
@@ -4,7 +4,8 @@
 
 (2k=2048x2048, 4k=4096x4096, 8k=8192x8192, 16k=16384x16384)
 
-| Codec | Type | BDW | SKL | BXT/APL | KBLx | ICL | TGL/RKL | DG1/SG1 |
+
+| Codec | Type | BDW | SKL | BXT/APL | KBLx | ICL | TGL/RKL/ADL-S | DG1/SG1 |
 |---|---|---|---|---|---|---|---|---|
 | AVC | Output | NV12 | NV12 | NV12 | NV12 | NV12 | NV12 | NV12 |
 |  | Max Res. | 4k | 4k | 4k | 4k | 4k | 4k | 4k |
@@ -41,7 +42,8 @@
 
 (4k=4096x4096, 16k=16384x16384)
 
-| Codec | Type | BDW | SKL | BXT/APL | KBLx | ICL | TGL/RKL | DG1/SG1 |
+
+| Codec | Type | BDW | SKL | BXT/APL | KBLx | ICL | TGL/RKL/ADL-S  | DG1/SG1 |
 |---|---|---|---|---|---|---|---|---|
 | AVC | Input |  | NV12 | NV12 | More* | More* | More* | More* |
 |  | Max Res. |  | 4k | 4k | 4k | 4k | 4k | 4k |
@@ -64,7 +66,8 @@
 
 (2k=2048x2048, 4k=4096x4096, 8k=8192x8192)
 
-| Codec | Type | BDW | SKL | BXT/APL | KBLx | ICL | TGL/RKL | DG1/SG1 |
+
+| Codec | Type | BDW | SKL | BXT/APL | KBLx | ICL | TGL/RKL/ADL-S | DG1/SG1 |
 |---|---|---|---|---|---|---|---|---|
 | AVC | Input | NV12 | NV12 | NV12 | NV12 | NV12 | NV12 | NV12 |
 |  | Max Res. | 4k | 4k | 4k | 4k | 4k | 4k | 4k |
@@ -90,7 +93,7 @@
 |                       | Output |  Y   |  Y   |  Y   |  Y   |  Y   |      |  Y   |  Y   |  Y   |      |      |      |
 |      JSL/EHL          | Input  |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |      |      |      |
 |                       | Output |  Y   |  Y   |  Y   |  Y   |  Y   |      |  Y   |  Y   |  Y   |      |      |      |
-|      TGL/RKL          | Input  |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |
+|   TGL/RKL/ADL-S       | Input  |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |
 |                       | Output |  Y   |  Y   |  Y   |  Y   |  Y   |      |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |
 |      DG1/SG1          | Input  |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |
 |                       | Output |  Y   |  Y   |  Y   |  Y   |  Y   |      |  Y   |  Y   |  Y   |  Y   |  Y   |  Y   |
diff --git a/media_driver/cmake/linux/media_gen_flags_linux.cmake b/media_driver/cmake/linux/media_gen_flags_linux.cmake
index 6aa38221ea93..747c7ce6ccfa 100644
--- a/media_driver/cmake/linux/media_gen_flags_linux.cmake
+++ b/media_driver/cmake/linux/media_gen_flags_linux.cmake
@@ -73,6 +73,10 @@ cmake_dependent_option(GEN12_RKL
     "Enabled RKL support (Gen12)" ON
     "GEN12_TGLLP" OFF)
 
+cmake_dependent_option(GEN12_ADLS
+    "Enabled ADLS support (Gen12)" ON
+    "GEN12_TGLLP" OFF)
+
 if(GEN8)
     add_definitions(-DIGFX_GEN8_SUPPORTED)
 endif()
@@ -152,4 +156,8 @@ if(GEN12_RKL)
     add_definitions(-DIGFX_GEN12_RKL_SUPPORTED)
 endif()
 
+if(GEN12_ADLS)
+    add_definitions(-DIGFX_GEN12_ADLS_SUPPORTED)
+endif()
+
 include(${MEDIA_EXT_CMAKE}/ext/linux/media_gen_flags_linux_ext.cmake OPTIONAL)
diff --git a/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp b/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp
index 5d3cfa64cf41..acf6422b3325 100644
--- a/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp
+++ b/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp
@@ -2491,10 +2491,20 @@ extern template class MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CONTEXT>;
 static bool tglLPRegistered = MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CONTEXT>::
     RegisterCaps<MediaLibvaCapsG12>((uint32_t)IGFX_TIGERLAKE_LP);
 
+#ifdef IGFX_GEN12_RKL_SUPPORTED
 static bool rklRegistered = MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CONTEXT>::
     RegisterCaps<MediaLibvaCapsG12>((uint32_t)IGFX_ROCKETLAKE);
+#endif
+
+
+#ifdef IGFX_GEN12_ADLS_SUPPORTED
+static bool adlsRegistered = MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CONTEXT>::
+    RegisterCaps<MediaLibvaCapsG12>((uint32_t)IGFX_ALDERLAKE_S);
+#endif
 
 #ifdef IGFX_GEN12_DG1_SUPPORTED
 static bool dg1Registered = MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CONTEXT>::
     RegisterCaps<MediaLibvaCapsG12>((uint32_t)IGFX_DG1);
 #endif
+
+
diff --git a/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp b/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp
index ffc59ac3814e..763feefb3e4e 100644
--- a/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp
+++ b/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp
@@ -477,6 +477,56 @@ static bool rklDeviceRegister = DeviceInfoFactory<LinuxDeviceInit>::
 
 #endif
 
+#ifdef IGFX_GEN12_ADLS_SUPPORTED
+static bool InitAdlsMediaSku(struct GfxDeviceInfo *devInfo,
+                             MediaFeatureTable *skuTable,
+                             struct LinuxDriverInfo *drvInfo)
+{
+    if (!InitTglMediaSku(devInfo, skuTable, drvInfo))
+    {
+        return false;
+    }
+
+    if (devInfo->eGTType == GTTYPE_GT0_5)
+    {
+        MEDIA_WR_SKU(skuTable, FtrGT0_5, 1);
+    }
+
+    MEDIA_WR_SKU(skuTable, FtrAV1VLDLSTDecoding, 1);
+
+    //Disable VP8 for ADLS
+    MEDIA_WR_SKU(skuTable, FtrIntelVP8VLDDecoding, 0);
+
+    return true;
+}
+
+static bool InitAdlsMediaWa(struct GfxDeviceInfo* devInfo,
+                            MediaWaTable* waTable,
+                            struct LinuxDriverInfo* drvInfo)
+{
+    if (!InitTglMediaWa(devInfo, waTable, drvInfo))
+    {
+        return false;
+    }
+
+    //ADL-S not need this
+    MEDIA_WR_WA(waTable, Wa_1409820462, 0);
+
+    return true;
+}
+
+static struct LinuxDeviceInit adlsDeviceInit =
+{
+    .productFamily    = IGFX_ALDERLAKE_S,
+    .InitMediaFeature = InitAdlsMediaSku,
+    .InitMediaWa = InitAdlsMediaWa,
+};
+
+static bool adlsDeviceRegister = DeviceInfoFactory<LinuxDeviceInit>::
+    RegisterDevice(IGFX_ALDERLAKE_S, &adlsDeviceInit);
+#endif
+
+
 static struct LinuxDeviceInit tgllpDeviceInit =
 {
     .productFamily    = IGFX_TIGERLAKE_LP,
diff --git a/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp b/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp
index d5b4164cea68..642b73f9a0b4 100644
--- a/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp
+++ b/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp
@@ -323,6 +323,75 @@ static bool rklGt1fDevice4C9A = DeviceInfoFactory<GfxDeviceInfo>::
     RegisterDevice(0x4C9A, &rklGt1Info);
 #endif
 
+#ifdef IGFX_GEN12_ADLS_SUPPORTED
+static struct GfxDeviceInfo adlsGt1Info = {
+    .platformType     = PLATFORM_DESKTOP,
+    .productFamily    = IGFX_ALDERLAKE_S,
+    .displayFamily    = IGFX_GEN12_CORE,
+    .renderFamily     = IGFX_GEN12_CORE,
+    .eGTType          = GTTYPE_GT1,
+    .L3CacheSizeInKb  = 0,
+    .L3BankCount      = 0,
+    .EUCount          = 0,
+    .SliceCount       = 0,
+    .SubSliceCount    = 0,
+    .MaxEuPerSubSlice = 0,
+    .isLCIA           = 0,
+    .hasLLC           = 0,
+    .hasERAM          = 0,
+    .InitMediaSysInfo = InitTglMediaSysInfo,
+    .InitShadowSku    = InitTglShadowSku,
+    .InitShadowWa     = InitTglShadowWa,
+};
+
+
+static struct GfxDeviceInfo adlsGt1fInfo = {
+    .platformType     = PLATFORM_DESKTOP,
+    .productFamily    = IGFX_ALDERLAKE_S,
+    .displayFamily    = IGFX_GEN12_CORE,
+    .renderFamily     = IGFX_GEN12_CORE,
+    .eGTType          = GTTYPE_GT0_5,
+    .L3CacheSizeInKb  = 0,
+    .L3BankCount      = 0,
+    .EUCount          = 0,
+    .SliceCount       = 0,
+    .SubSliceCount    = 0,
+    .MaxEuPerSubSlice = 0,
+    .isLCIA           = 0,
+    .hasLLC           = 0,
+    .hasERAM          = 0,
+    .InitMediaSysInfo = InitTglMediaSysInfo,
+    .InitShadowSku    = InitTglShadowSku,
+    .InitShadowWa     = InitTglShadowWa,
+};
+
+
+static bool adlsGt1Device4680 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4680, &adlsGt1Info);
+
+static bool adlsGt1Device4681 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4681, &adlsGt1Info);
+
+static bool adlsGt1Device4682 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4682, &adlsGt1Info);
+
+static bool adlsGt1Device4683 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4683, &adlsGt1fInfo);
+
+static bool adlsGt1Device4690 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4690, &adlsGt1Info);
+
+static bool adlsGt1Device4691 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4691, &adlsGt1Info);
+
+static bool adlsGt1Device4692 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4692, &adlsGt1Info);
+
+static bool adlsGt1Device4693 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0x4693, &adlsGt1Info);
+
+#endif
+
 static bool tgllpGt2Device9a40 = DeviceInfoFactory<GfxDeviceInfo>::
     RegisterDevice(0x9A40, &tgllpGt2Info);
 
diff --git a/media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.cpp b/media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.cpp
new file mode 100644
index 000000000000..414c0cf2eddc
--- /dev/null
+++ b/media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.cpp
@@ -0,0 +1,101 @@
+/*
+* Copyright (c) 2011-2020, Intel Corporation
+*
+* Permission is hereby granted, free of charge, to any person obtaining a
+* copy of this software and associated documentation files (the "Software"),
+* to deal in the Software without restriction, including without limitation
+* the rights to use, copy, modify, merge, publish, distribute, sublicense,
+* and/or sell copies of the Software, and to permit persons to whom the
+* Software is furnished to do so, subject to the following conditions:
+*
+* The above copyright notice and this permission notice shall be included
+* in all copies or substantial portions of the Software.
+*
+* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+* OTHER DEALINGS IN THE SOFTWARE.
+*/
+//!
+//! \file     media_interfaces_g12_adls.cpp
+//! \brief    Helps with Gen12 ADLS factory creation.
+//!
+
+#include "media_interfaces_g12_adls.h"
+
+extern template class MediaInterfacesFactory<MhwInterfaces>;
+extern template class MediaInterfacesFactory<MmdDevice>;
+extern template class MediaInterfacesFactory<MosUtilDevice>;
+extern template class MediaInterfacesFactory<CodechalDevice>;
+extern template class MediaInterfacesFactory<CMHalDevice>;
+extern template class MediaInterfacesFactory<VphalDevice>;
+extern template class MediaInterfacesFactory<RenderHalDevice>;
+extern template class MediaInterfacesFactory<Nv12ToP010Device>;
+extern template class MediaInterfacesFactory<DecodeHistogramDevice>;
+
+static bool adlsRegisteredVphal =
+    MediaInterfacesFactory<VphalDevice>::
+    RegisterHal<VphalInterfacesG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+
+static bool adlsRegisteredMhw =
+    MediaInterfacesFactory<MhwInterfaces>::
+    RegisterHal<MhwInterfacesG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+
+#ifdef _MMC_SUPPORTED
+static bool adlsRegisteredMmd =
+    MediaInterfacesFactory<MmdDevice>::
+        RegisterHal<MmdDeviceG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+#endif
+
+static bool adlsRegisteredNv12ToP010 =
+    MediaInterfacesFactory<Nv12ToP010Device>::
+    RegisterHal<Nv12ToP010DeviceG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+
+static bool adlsRegisteredCodecHal =
+    MediaInterfacesFactory<CodechalDevice>::
+    RegisterHal<CodechalInterfacesG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+
+static bool adlsRegisteredCMHal =
+    MediaInterfacesFactory<CMHalDevice>::
+    RegisterHal<CMHalInterfacesG12Adls>((uint32_t)IGFX_ALDERLAKE_S);
+
+static bool adlsRegisteredMosUtil =
+    MediaInterfacesFactory<MosUtilDevice>::
+    RegisterHal<MosUtilDeviceG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+
+static bool adlsRegisteredRenderHal =
+    MediaInterfacesFactory<RenderHalDevice>::
+    RegisterHal<RenderHalInterfacesG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+
+static bool adlsRegisteredDecodeHistogram =
+    MediaInterfacesFactory<DecodeHistogramDevice>::
+    RegisterHal<DecodeHistogramDeviceG12Tgllp>((uint32_t)IGFX_ALDERLAKE_S);
+
+#define PLATFORM_INTEL_ADLS 21
+#define GENX_TGLLP 12
+
+MOS_STATUS CMHalInterfacesG12Adls::Initialize(CM_HAL_STATE *pCmState)
+{
+    if (pCmState == nullptr)
+    {
+        MHW_ASSERTMESSAGE("pCmState is nullptr.")
+        return MOS_STATUS_INVALID_PARAMETER;
+    }
+
+    m_cmhalDevice = MOS_New(CMHal, pCmState);
+    if (m_cmhalDevice == nullptr)
+    {
+        MHW_ASSERTMESSAGE("Create CM Hal interfaces failed.")
+        return MOS_STATUS_NO_SPACE;
+    }
+
+    m_cmhalDevice->SetGenPlatformInfo(PLATFORM_INTEL_ADLS, PLATFORM_INTEL_GT2, "TGLLP");
+    uint32_t cisaIDs[] = {GENX_TGLLP};
+    m_cmhalDevice->AddSupportedCisaIDs(cisaIDs, sizeof(cisaIDs) / sizeof(uint32_t));
+    m_cmhalDevice->m_l3Plane       = TGL_L3_PLANE;
+    m_cmhalDevice->m_l3ConfigCount = TGL_L3_CONFIG_NUM;
+    return MOS_STATUS_SUCCESS;
+}
diff --git a/media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.h b/media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.h
new file mode 100644
index 000000000000..0d03ceb59c3a
--- /dev/null
+++ b/media_driver/media_interface/media_interfaces_m12_adls/media_interfaces_g12_adls.h
@@ -0,0 +1,44 @@
+/*
+* Copyright (c) 2011-2020, Intel Corporation
+*
+* Permission is hereby granted, free of charge, to any person obtaining a
+* copy of this software and associated documentation files (the "Software"),
+* to deal in the Software without restriction, including without limitation
+* the rights to use, copy, modify, merge, publish, distribute, sublicense,
+* and/or sell copies of the Software, and to permit persons to whom the
+* Software is furnished to do so, subject to the following conditions:
+*
+* The above copyright notice and this permission notice shall be included
+* in all copies or substantial portions of the Software.
+*
+* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+* OTHER DEALINGS IN THE SOFTWARE.
+*/
+
+//!
+//! \file     media_interfaces_g12_adls.h
+//! \brief    All interfaces used for adls that require factory creation
+//!
+
+#ifndef __MEDIA_INTERFACES_G12_adls_H__
+#define __MEDIA_INTERFACES_G12_adls_H__
+
+#include "media_interfaces_g12_tgllp.h"
+#include "renderhal_g12.h"
+
+class CMHalInterfacesG12Adls : public CMHalDevice
+{
+protected:
+    using CMHal = CM_HAL_G12_X;
+    MOS_STATUS Initialize(
+        CM_HAL_STATE *pCmState);
+};
+
+
+
+#endif // __MEDIA_INTERFACES_G12_rkl_H__
diff --git a/media_driver/media_interface/media_interfaces_m12_adls/media_srcs.cmake b/media_driver/media_interface/media_interfaces_m12_adls/media_srcs.cmake
new file mode 100644
index 000000000000..8d9d9fcb4554
--- /dev/null
+++ b/media_driver/media_interface/media_interfaces_m12_adls/media_srcs.cmake
@@ -0,0 +1,49 @@
+# Copyright (c) 2020, Intel Corporation
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+
+set(TMP_SOURCES_
+    ${CMAKE_CURRENT_LIST_DIR}/media_interfaces_g12_adls.cpp
+)
+
+set(TMP_HEADERS_
+    ${CMAKE_CURRENT_LIST_DIR}/media_interfaces_g12_adls.h
+)
+
+set(SOURCES_
+    ${SOURCES_}
+    ${TMP_SOURCES_}
+)
+
+set(HEADERS_
+    ${HEADERS_}
+    ${TMP_HEADERS_}
+)
+
+set(COMMON_SOURCES_
+    ${COMMON_SOURCES_}
+    ${TMP_SOURCES_}
+)
+
+set(COMMON_HEADERS_
+    ${COMMON_HEADERS_}
+    ${TMP_HEADERS_}
+)
+
+media_add_curr_to_include_path()
diff --git a/media_driver/media_interface/media_srcs.cmake b/media_driver/media_interface/media_srcs.cmake
index 9ad9050d09cf..b3bf03d98b0b 100644
--- a/media_driver/media_interface/media_srcs.cmake
+++ b/media_driver/media_interface/media_srcs.cmake
@@ -67,4 +67,8 @@ if(GEN12_RKL)
     media_include_subdirectory(media_interfaces_m12_rkl)
 endif()
 
+if(GEN12_ADLS)
+    media_include_subdirectory(media_interfaces_m12_adls)
+endif()
+
 include(${MEDIA_EXT}/media_interface/media_srcs.cmake OPTIONAL)
-- 
2.29.0

