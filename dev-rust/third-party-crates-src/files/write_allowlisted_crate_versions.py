#!/usr/bin/env python3
# Copyright 2022 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Writes allowlisted crate names/versions into our ebuild.

This is intended to be the primary method for keeping our ebuild's allowlist
up-to-date.

FIXME(b/240953811): Remove this once our migration is done.
"""

import argparse
import logging
from pathlib import Path
import sys
from typing import List

import migration_utils


# Crates which are allowlisted because they don't exist in dev-rust, and
# because their users all depend directly on dev-rust/third-party-crates-src:=
# (see b/247596883#comment3 for why this is important).
EXPLICITLY_ALLOWLISTED_CRATES = {
    "bytemuck-1.12.1",
}


def is_unmigrated_third_party_crate(ebuild_contents: str):
    """Returns True if this ebuild is an unmigrated third-party crate."""
    return migration_utils.MIGRATED_CRATE_MARKER not in ebuild_contents


def find_dev_rust_crates(dev_rust: Path) -> List[str]:
    """Returns all dev-rust crate names which haven't been migrated yet."""
    results = []
    for subdir in dev_rust.iterdir():
        if not subdir.is_dir():
            continue

        dirents = list(subdir.iterdir())
        crate_name = subdir.name
        if any(x.name.endswith("-9999.ebuild") for x in dirents):
            logging.info("Skipping %s; it is a workon crate", crate_name)
            continue

        has_unmigrated_ebuild = False
        for maybe_ebuild in dirents:
            if maybe_ebuild.suffix != ".ebuild" or maybe_ebuild.is_symlink():
                continue

            ebuild_contents = maybe_ebuild.read_text(encoding="utf-8")
            if is_unmigrated_third_party_crate(ebuild_contents):
                has_unmigrated_ebuild = True
                break

        if has_unmigrated_ebuild:
            results.append(subdir.name)

    results.sort()
    return results


def update_allowlist(ebuild: Path, new_allowlist: List[str]):
    """Updates third-party-crates-src with new crate allowlists.

    Args:
        ebuild: ebuild to update.
        new_allowlist: Versions of crates to allow the installation of.
    """
    new_ebuild_lines = [
        x.rstrip() for x in ebuild.read_text(encoding="utf-8").splitlines()
    ]

    disclaimer_lines = [
        "\t# NOTE: This list was generated by",
        "\t# ${FILESDIR}/write_allowlisted_crate_versions.py. Any",
        "\t# modifications may be overwritten.",
    ]

    # We always want quoting here, and crate names/versions can't have quotes.
    allowlist_lines = [f'\t"{x}"' for x in new_allowlist]
    start = new_ebuild_lines.index("ALLOWED_CRATE_VERSIONS=(")
    end = new_ebuild_lines.index(")", start)

    new_ebuild_lines = (new_ebuild_lines[:start + 1] + disclaimer_lines +
                        allowlist_lines + new_ebuild_lines[end:])

    # Ensure there's exactly one newline at the end of this ebuild, to keep
    # presubmits happy.
    ebuild_text = "\n".join(new_ebuild_lines).rstrip() + "\n"
    ebuild.write_text(ebuild_text, encoding="utf-8")


def get_parser():
    """Constructs our arg parser."""
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    my_location = Path(__file__).parent
    dev_rust = my_location.parent.parent
    parser.add_argument("--dev-rust", type=Path, default=dev_rust)
    parser.add_argument(
        "--third-party-crates-ebuild",
        type=Path,
        default=my_location.parent / "third-party-crates-src-9999.ebuild",
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Use debug logging.",
    )
    parser.add_argument(
        "--rust-crates-path",
        type=Path,
        default=dev_rust.parent.parent / "rust_crates",
    )
    return parser


def crate_name_from_vendor_dir(dir_name: str) -> str:
    """Returns the name of the crate designated by dir_name."""
    # See https://semver.org/ for a specification of these versions.
    no_meta = dir_name.split("+", 1)[0]
    no_beta = no_meta.replace("-beta.", "")
    return no_beta.rsplit("-", 1)[0]


def main(argv: List[str]):
    """Main function."""
    opts = get_parser().parse_args(argv)
    logging.basicConfig(
        format=">> %(asctime)s: %(levelname)s: %(filename)s:%(lineno)d: "
        "%(message)s",
        level=logging.DEBUG if opts.debug else logging.INFO,
    )

    non_migrated_crates = set(find_dev_rust_crates(opts.dev_rust))
    vendor_dir = opts.rust_crates_path / "vendor"
    new_allowlist = []
    for crate_dir in vendor_dir.iterdir():
        if not crate_dir.is_dir():
            continue

        crate_dir_name = crate_dir.name
        crate_name = crate_name_from_vendor_dir(crate_dir_name)
        if (crate_name in non_migrated_crates
                and crate_dir_name not in EXPLICITLY_ALLOWLISTED_CRATES):
            logging.debug("Skipping %s, since it is not yet migrated",
                          crate_dir_name)
            continue
        new_allowlist.append(crate_dir_name)

    new_allowlist.sort()
    update_allowlist(opts.third_party_crates_ebuild, new_allowlist)


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
