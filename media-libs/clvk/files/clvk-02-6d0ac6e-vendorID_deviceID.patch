commit 6d0ac6ec51d51d172ace07fd0c63fbdefc0ea6d8
Author: Romaric Jodin <89833130+rjodinchr@users.noreply.github.com>
Date:   Mon Feb 13 18:27:27 2023 +0100

    use vendorID/deviceID to choose device properties (#488)
    
    vendorID/deviceID are more reliable to identify which device
    properties to select.

diff --git a/clvk/src/device.hpp b/clvk/src/device.hpp
index 1003500..1722ec8 100644
--- a/clvk/src/device.hpp
+++ b/clvk/src/device.hpp
@@ -71,8 +71,9 @@ struct cvk_device : public _cl_device_id,
             break;
         }
 
-        m_clvk_properties =
-            create_cvk_device_properties(m_properties.deviceName);
+        m_clvk_properties = create_cvk_device_properties(
+            m_properties.deviceName, m_properties.vendorID,
+            m_properties.deviceID);
     }
 
     static cvk_device* create(cvk_platform* platform, VkInstance instance,
diff --git a/clvk/src/device_properties.cpp b/clvk/src/device_properties.cpp
index 2e8c4b5..1140497 100644
--- a/clvk/src/device_properties.cpp
+++ b/clvk/src/device_properties.cpp
@@ -59,11 +59,21 @@ struct cvk_device_properties_intel : public cvk_device_properties {
     }
 };
 
+static bool isIntelDevice(const char* name, const uint32_t vendorID) {
+    const uint32_t IntelVendorID = 0x8086;
+    return vendorID == IntelVendorID || strncmp(name, "Intel", 5) == 0;
+}
+
 struct cvk_device_properties_amd : public cvk_device_properties {
     cl_uint get_max_first_cmd_batch_size() const override final { return 10; }
     cl_uint get_max_cmd_group_size() const override final { return 1; }
 };
 
+static bool isAMDDevice(const char* name, const uint32_t vendorID) {
+    const uint32_t AMDVendorID = 0x1002;
+    return vendorID == AMDVendorID || strncmp(name, "AMD", 3) == 0;
+}
+
 struct cvk_device_properties_samsung_xclipse_920
     : public cvk_device_properties {
     const std::vector<std::string> get_native_builtins() const override final {
@@ -76,7 +86,8 @@ struct cvk_device_properties_samsung_xclipse_920
     return std::make_unique<x>();
 
 std::unique_ptr<cvk_device_properties>
-create_cvk_device_properties(const char* name) {
+create_cvk_device_properties(const char* name, const uint32_t vendorID,
+                             const uint32_t deviceID) {
     if (strncmp(name, "Mali-", 5) == 0) {
 #ifdef __ANDROID__
         // Find out which SoC this is.
@@ -106,16 +117,17 @@ create_cvk_device_properties(const char* name) {
         RETURN(cvk_device_properties_adreno_630);
     } else if (strcmp(name, "Adreno (TM) 640") == 0) {
         RETURN(cvk_device_properties_adreno_640);
-    } else if (strncmp(name, "Intel", 5) == 0) {
+    } else if (isIntelDevice(name, vendorID)) {
         RETURN(cvk_device_properties_intel);
-    } else if (strncmp(name, "AMD", 3) == 0) {
+    } else if (isAMDDevice(name, vendorID)) {
         RETURN(cvk_device_properties_amd);
     } else if (strcmp(name, "Samsung Xclipse 920") == 0) {
         RETURN(cvk_device_properties_samsung_xclipse_920);
     } else {
-        cvk_warn("Unrecognized device '%s', some device properties will be "
+        cvk_warn("Unrecognized device '%s' (vendorID '0x%x' - deviceID "
+                 "'0x%x'), some device properties will be "
                  "incorrect.",
-                 name);
+                 name, vendorID, deviceID);
     }
 
     RETURN(cvk_device_properties);
diff --git a/clvk/src/device_properties.hpp b/clvk/src/device_properties.hpp
index d5c837a..1271031 100644
--- a/clvk/src/device_properties.hpp
+++ b/clvk/src/device_properties.hpp
@@ -48,4 +48,5 @@ struct cvk_device_properties {
 };
 
 std::unique_ptr<cvk_device_properties>
-create_cvk_device_properties(const char* name);
+create_cvk_device_properties(const char* name, const uint32_t vendorID,
+                             const uint32_t deviceID);
