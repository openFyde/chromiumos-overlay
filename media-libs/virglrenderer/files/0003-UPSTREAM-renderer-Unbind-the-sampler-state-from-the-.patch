From b8f1fd69ad648f4261ede9a6792f80f8ed874353 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <corentin.noel@collabora.com>
Date: Fri, 21 Apr 2023 15:58:40 +0200
Subject: [PATCH 3/8] UPSTREAM: renderer: Unbind the sampler state from the
 subcontext on destroy
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Make sure to not leave a dungling pointer in the case the sampler state object
is destroyed before the sub context.

Change-Id: I4edbe831d5087bbff385056e15bfe83a15be55cf
Signed-off-by: Corentin NoÃ«l <corentin.noel@collabora.com>
Part-of: <https://gitlab.freedesktop.org/virgl/virglrenderer/-/merge_requests/1094>
(cherry picked from commit 0ece392fa5ffda9dd02a548a95d5fea69ca55a3c)
---
 src/vrend_renderer.c | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/src/vrend_renderer.c b/src/vrend_renderer.c
index 287d575f..f3f5fe98 100644
--- a/src/vrend_renderer.c
+++ b/src/vrend_renderer.c
@@ -511,6 +511,7 @@ struct vrend_surface {
 
 struct vrend_sampler_state {
    struct pipe_sampler_state base;
+   struct vrend_sub_context *sub_ctx;
    GLuint ids[2];
 };
 
@@ -2397,6 +2398,28 @@ static void vrend_destroy_sampler_state_object(void *obj_ptr)
 
    if (has_feature(feat_samplers))
       glDeleteSamplers(2, state->ids);
+
+   if (state->sub_ctx) {
+      struct vrend_sub_context *sub_ctx = state->sub_ctx;
+      for (enum pipe_shader_type shader_type = PIPE_SHADER_VERTEX;
+           shader_type < PIPE_SHADER_TYPES;
+           shader_type++) {
+         uint32_t num_sampler_states = sub_ctx->num_sampler_states[shader_type];
+         bool found = false;
+         for (uint32_t sampler = 0; sampler < num_sampler_states; sampler++) {
+            if (sub_ctx->sampler_state[shader_type][sampler] == state) {
+               sub_ctx->sampler_state[shader_type][sampler] = NULL;
+               sub_ctx->num_sampler_states[shader_type]--;
+               sub_ctx->sampler_views_dirty[shader_type] |= (1u << sampler);
+               found = true;
+            } else if (found) {
+               sub_ctx->sampler_state[shader_type][sampler-1] = sub_ctx->sampler_state[shader_type][sampler];
+               sub_ctx->sampler_views_dirty[shader_type] |= (1u << sampler);
+            }
+         }
+      }
+   }
+
    FREE(state);
 }
 
@@ -6673,6 +6696,8 @@ void vrend_bind_sampler_states(struct vrend_context *ctx,
       if (!state && handles[i])
          vrend_printf("Failed to bind sampler state (handle=%d)\n", handles[i]);
 
+      if (state)
+         state->sub_ctx = ctx->sub;
       ctx->sub->sampler_state[shader_type][start_slot + i] = state;
       ctx->sub->sampler_views_dirty[shader_type] |= (1 << (start_slot + i));
    }
-- 
2.40.1.495.gc816e09b53d-goog

