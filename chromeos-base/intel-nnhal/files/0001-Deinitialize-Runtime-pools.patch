From 56a3c3190d6a7c5ac3a18b24f32ccb7bde6edefa Mon Sep 17 00:00:00 2001
From: Anisha Kulkarni <anisha.dattatraya.kulkarni@intel.com>
Date: Thu, 7 Jan 2021 17:35:57 -0800
Subject: [PATCH 1/2] Deinitialize Runtime pools

---
 intel_nn_hal/GnaPreparedModel.cpp |  4 ++++
 intel_nn_hal/PreparedModel.cpp    | 14 ++++++++++++++
 intel_nn_hal/Utils.h              |  3 ++-
 3 files changed, 20 insertions(+), 1 deletion(-)

diff --git a/intel_nn_hal/GnaPreparedModel.cpp b/intel_nn_hal/GnaPreparedModel.cpp
index 9f69e5d..65a1ca5 100755
--- a/intel_nn_hal/GnaPreparedModel.cpp
+++ b/intel_nn_hal/GnaPreparedModel.cpp
@@ -840,6 +840,10 @@ void GnaPreparedModel::asyncExecute(const V1_0_Request& request, MeasureTiming m
         runtimeInfo.update();
     }
 
+    for (auto runtimeInfo : requestPoolInfos) {
+        runtimeInfo.unmap_mem();
+    }
+
     if (measure == MeasureTiming::YES) {
         driverEnd = now();
         Timing timing = {.timeOnDevice = uint64_t(microsecondsDuration(deviceEnd, deviceStart)),
diff --git a/intel_nn_hal/PreparedModel.cpp b/intel_nn_hal/PreparedModel.cpp
index 757dfd0..93bb88a 100644
--- a/intel_nn_hal/PreparedModel.cpp
+++ b/intel_nn_hal/PreparedModel.cpp
@@ -52,6 +52,20 @@ size_t product(const vec<T>& dims) {
     return rc;
 }
 
+bool RunTimePoolInfo::unmap_mem() {
+        if (buffer){
+            const size_t size = hidlMemory.size();
+            if (hidlMemory.name() == "mmap_fd") {
+                if (munmap(buffer, size)) {
+                    VLOG(L1, "Unmap failed\n");
+                    return false;
+                }
+                buffer = nullptr;
+            }
+        }
+    return true;
+}
+
 // TODO: short term, make share memory mapping and updating a utility function.
 // TODO: long term, implement mmap_fd as a hidl IMemory service.
 bool RunTimePoolInfo::set(const hidl_memory& hidlMemory) {
diff --git a/intel_nn_hal/Utils.h b/intel_nn_hal/Utils.h
index 134c8e0..6ccfeae 100755
--- a/intel_nn_hal/Utils.h
+++ b/intel_nn_hal/Utils.h
@@ -237,10 +237,11 @@ struct RunTimeOperandInfo {
 struct RunTimePoolInfo {
     sp<::android::hidl::memory::V1_0::IMemory> memory;
     hidl_memory hidlMemory;
-    uint8_t* buffer;
+    uint8_t* buffer = nullptr;
 
     bool set(const hidl_memory& hidlMemory);
     bool update();
+    bool unmap_mem();
 };
 
 bool setRunTimePoolInfosFromHidlMemories(std::vector<RunTimePoolInfo>* poolInfos,
-- 
2.17.1

