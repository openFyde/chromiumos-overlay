From 89b1118a6643e4177466ed834cb937f1085384f4 Mon Sep 17 00:00:00 2001
From: Kevin King <kcking@google.com>
Date: Thu, 26 Jan 2023 20:51:20 +0000
Subject: [PATCH] Check validity of session in pkcs11_get_session

Problem: when chapsd crashes, existing PKCS11 session handles are no longer
valid. wpa_supplicant uses libp11 to perform 802.1x certificate authentication.
When a user tries to re-connect with 802.1x, libp11 returns an invalid session
handle and the authenication fails. The chromebook must be restarted to return
wpa_supplicant to a valid state.

Solution: This commit uses C_GetSessionInfo to check that a handle is still
valid before returning it from the pool. If a session is no longer valid, it is
discarded.

An upstream PR has been opened at https://github.com/OpenSC/libp11/pull/482.
---
 src/p11_slot.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/src/p11_slot.c b/src/p11_slot.c
index 3c00e22..ccb9499 100644
--- a/src/p11_slot.c
+++ b/src/p11_slot.c
@@ -123,6 +123,7 @@ int pkcs11_get_session(PKCS11_SLOT_private * slot, int rw, CK_SESSION_HANDLE *se
 {
 	PKCS11_CTX_private *ctx = slot->ctx;
 	int rv = CKR_OK;
+	CK_SESSION_INFO session_info;
 
 	if (rw < 0)
 		return -1;
@@ -136,7 +137,17 @@ int pkcs11_get_session(PKCS11_SLOT_private * slot, int rw, CK_SESSION_HANDLE *se
 		if (slot->session_head != slot->session_tail) {
 			*sessionp = slot->session_pool[slot->session_head];
 			slot->session_head = (slot->session_head + 1) % slot->session_poolsize;
-			break;
+
+			/* Check if session is valid */
+			rv = CRYPTOKI_call(ctx,
+				C_GetSessionInfo(*sessionp, &session_info));
+			if (rv == CKR_OK) {
+				break;
+			} else {
+				/* Forget this session */
+				slot->num_sessions--;
+				continue;
+			}
 		}
 
 		/* Check if new can be instantiated */
-- 
2.39.1.456.gfc5497dd1b-goog

