From d13c85ebdf6fddcba1791c2536820b01154ae5f5 Mon Sep 17 00:00:00 2001
From: Christopher Di Bella <cjdb@google.com>
Date: Fri, 28 Oct 2022 00:25:08 +0000
Subject: [PATCH] [libcxx] makes it possible to strip debug info from libc++

ChromeOS has reached the 4GB ceiling when compiling Chrome in debug mode
on 32-bit systems. After some investigation, we learnt that we can
remove 1.5GB of debug info by disabling debug info from libc++ symbols.

Since this comes at the cost of developer experience, it's opt-in, and
is only recommended if there are no other solutions to achieving a
smaller debug build. Future work on this should look into removing debug
info from content that genuinely doesn't need debug info.
---
 libcxx/include/__config                        | 8 ++++++++
 libcxx/include/__debug                         | 3 +++
 libcxx/include/__hash_table                    | 3 ++-
 libcxx/include/__tree                          | 3 ++-
 libcxx/include/__tuple                         | 3 ++-
 libcxx/include/__utility/as_const.h            | 2 ++
 libcxx/include/__utility/cmp.h                 | 2 ++
 libcxx/include/__utility/declval.h             | 2 ++
 libcxx/include/__utility/exchange.h            | 2 ++
 libcxx/include/__utility/forward.h             | 2 ++
 libcxx/include/__utility/in_place.h            | 2 ++
 libcxx/include/__utility/integer_sequence.h    | 2 ++
 libcxx/include/__utility/move.h                | 2 ++
 libcxx/include/__utility/pair.h                | 2 ++
 libcxx/include/__utility/piecewise_construct.h | 2 ++
 libcxx/include/__utility/priority_tag.h        | 2 ++
 libcxx/include/__utility/rel_ops.h             | 2 ++
 libcxx/include/__utility/swap.h                | 2 ++
 libcxx/include/__utility/to_underlying.h       | 2 ++
 libcxx/include/__utility/transaction.h         | 2 ++
 libcxx/include/regex                           | 2 ++
 21 files changed, 49 insertions(+), 3 deletions(-)

diff --git a/libcxx/include/__config b/libcxx/include/__config
index 7a4d5743f147..e54f3ca612cf 100644
--- a/libcxx/include/__config
+++ b/libcxx/include/__config
@@ -1236,6 +1236,14 @@ extern "C" _LIBCPP_FUNC_VIS void __sanitizer_annotate_contiguous_container(
 #define _LIBCPP_HAS_NO_PRAGMA_PUSH_POP_MACRO
 #endif
 
+#if defined(_LIBCPP_NO_DEBUG_INFO)
+  #  define _LIBCPP_DISABLE_DEBUG_INFO _Pragma("clang attribute push([[gnu::nodebug]], apply_to = any(type_alias, hasType(functionType)))")
+  #  define _LIBCPP_ENABLE_DEBUG_INFO _Pragma("clang attribute pop")
+#else
+  #  define _LIBCPP_DISABLE_DEBUG_INFO
+  #  define _LIBCPP_ENABLE_DEBUG_INFO
+#endif
+
 #if defined(_LIBCPP_HAS_NO_PRAGMA_PUSH_POP_MACRO)
 #  define _LIBCPP_PUSH_MACROS
 #  define _LIBCPP_POP_MACROS
diff --git a/libcxx/include/__debug b/libcxx/include/__debug
index 1296b4db5bbf..30ace5569f42 100644
--- a/libcxx/include/__debug
+++ b/libcxx/include/__debug
@@ -14,6 +14,8 @@
 #include <__config>
 #include <type_traits>
 
+_LIBCPP_DISABLE_DEBUG_INFO
+
 #if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
 #  pragma GCC system_header
 #endif
@@ -227,5 +229,6 @@ _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 inline void __debug_db_inser
 }
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___DEBUG
diff --git a/libcxx/include/__hash_table b/libcxx/include/__hash_table
index d180187a7358..a6f8ecdb980b 100644
--- a/libcxx/include/__hash_table
+++ b/libcxx/include/__hash_table
@@ -31,7 +31,7 @@
 _LIBCPP_PUSH_MACROS
 #include <__undef_macros>
 
-
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 template <class _Key, class _Tp>
@@ -2796,6 +2796,7 @@ __hash_table<_Tp, _Hash, _Equal, _Alloc>::__subscriptable(const const_iterator*,
 #endif // _LIBCPP_DEBUG_LEVEL == 2
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 _LIBCPP_POP_MACROS
 
diff --git a/libcxx/include/__tree b/libcxx/include/__tree
index f8d2226e66fb..279f6b9b8135 100644
--- a/libcxx/include/__tree
+++ b/libcxx/include/__tree
@@ -26,7 +26,7 @@
 _LIBCPP_PUSH_MACROS
 #include <__undef_macros>
 
-
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #if defined(__GNUC__) && !defined(__clang__) // gcc.gnu.org/PR37804
@@ -2743,6 +2743,7 @@ swap(__tree<_Tp, _Compare, _Allocator>& __x,
 }
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 _LIBCPP_POP_MACROS
 
diff --git a/libcxx/include/__tuple b/libcxx/include/__tuple
index 6d13bb24c579..3bcd84861456 100644
--- a/libcxx/include/__tuple
+++ b/libcxx/include/__tuple
@@ -18,7 +18,7 @@
 #  pragma GCC system_header
 #endif
 
-
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 template <class _Tp> struct _LIBCPP_TEMPLATE_VIS tuple_size;
@@ -546,5 +546,6 @@ struct __sfinae_assign_base<false, true> {
 #endif // _LIBCPP_STD_VER > 14
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___TUPLE
diff --git a/libcxx/include/__utility/as_const.h b/libcxx/include/__utility/as_const.h
index be7dd8c7cf23..5d0da1367406 100644
--- a/libcxx/include/__utility/as_const.h
+++ b/libcxx/include/__utility/as_const.h
@@ -18,6 +18,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #if _LIBCPP_STD_VER > 14
@@ -29,5 +30,6 @@ void as_const(const _Tp&&) = delete;
 #endif
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_AS_CONST_H
diff --git a/libcxx/include/__utility/cmp.h b/libcxx/include/__utility/cmp.h
index 5a8121d8a6f0..d35b987b8869 100644
--- a/libcxx/include/__utility/cmp.h
+++ b/libcxx/include/__utility/cmp.h
@@ -22,6 +22,7 @@
 _LIBCPP_PUSH_MACROS
 #include <__undef_macros>
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #if _LIBCPP_STD_VER > 17
@@ -104,6 +105,7 @@ bool in_range(_Up __u) noexcept
 #endif // _LIBCPP_STD_VER > 17
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 _LIBCPP_POP_MACROS
 
diff --git a/libcxx/include/__utility/declval.h b/libcxx/include/__utility/declval.h
index 97fd1eba91c6..b9d8d1ff7624 100644
--- a/libcxx/include/__utility/declval.h
+++ b/libcxx/include/__utility/declval.h
@@ -15,6 +15,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 // Suppress deprecation notice for volatile-qualified return type resulting
@@ -30,5 +31,6 @@ template <class _Tp>
 decltype(__declval<_Tp>(0)) declval() _NOEXCEPT;
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_DECLVAL_H
diff --git a/libcxx/include/__utility/exchange.h b/libcxx/include/__utility/exchange.h
index d9b3c151755f..d02a87273537 100644
--- a/libcxx/include/__utility/exchange.h
+++ b/libcxx/include/__utility/exchange.h
@@ -18,6 +18,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #if _LIBCPP_STD_VER > 11
@@ -33,5 +34,6 @@ _T1 exchange(_T1& __obj, _T2&& __new_value)
 #endif // _LIBCPP_STD_VER > 11
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_EXCHANGE_H
diff --git a/libcxx/include/__utility/forward.h b/libcxx/include/__utility/forward.h
index 6ee1f818baca..bb1274342464 100644
--- a/libcxx/include/__utility/forward.h
+++ b/libcxx/include/__utility/forward.h
@@ -17,6 +17,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 template <class _Tp>
@@ -33,5 +34,6 @@ forward(typename remove_reference<_Tp>::type&& __t) _NOEXCEPT {
 }
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_FORWARD_H
diff --git a/libcxx/include/__utility/in_place.h b/libcxx/include/__utility/in_place.h
index 7a4973fa0407..b74e446063e4 100644
--- a/libcxx/include/__utility/in_place.h
+++ b/libcxx/include/__utility/in_place.h
@@ -16,6 +16,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #if _LIBCPP_STD_VER > 14
@@ -54,5 +55,6 @@ using __is_inplace_index = __is_inplace_index_imp<__uncvref_t<_Tp>>;
 #endif // _LIBCPP_STD_VER > 14
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_IN_PLACE_H
diff --git a/libcxx/include/__utility/integer_sequence.h b/libcxx/include/__utility/integer_sequence.h
index 633f1333e247..31856929d666 100644
--- a/libcxx/include/__utility/integer_sequence.h
+++ b/libcxx/include/__utility/integer_sequence.h
@@ -16,6 +16,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #if _LIBCPP_STD_VER > 11
@@ -74,5 +75,6 @@ template<class... _Tp>
 #endif // _LIBCPP_STD_VER > 11
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_INTEGER_SEQUENCE_H
diff --git a/libcxx/include/__utility/move.h b/libcxx/include/__utility/move.h
index 7d1c8c2522ad..6b9f14a40da1 100644
--- a/libcxx/include/__utility/move.h
+++ b/libcxx/include/__utility/move.h
@@ -17,6 +17,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 template <class _Tp>
@@ -43,5 +44,6 @@ move_if_noexcept(_Tp& __x) _NOEXCEPT {
 }
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_MOVE_H
diff --git a/libcxx/include/__utility/pair.h b/libcxx/include/__utility/pair.h
index 97635c2e61b5..5f3e4a40c637 100644
--- a/libcxx/include/__utility/pair.h
+++ b/libcxx/include/__utility/pair.h
@@ -24,6 +24,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #if defined(_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR)
@@ -621,5 +622,6 @@ constexpr _T1 const && get(pair<_T2, _T1> const&& __p) _NOEXCEPT
 #endif
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_PAIR_H
diff --git a/libcxx/include/__utility/piecewise_construct.h b/libcxx/include/__utility/piecewise_construct.h
index 3cc86fef2a0f..592419aa8a3a 100644
--- a/libcxx/include/__utility/piecewise_construct.h
+++ b/libcxx/include/__utility/piecewise_construct.h
@@ -15,6 +15,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 struct _LIBCPP_TEMPLATE_VIS piecewise_construct_t { explicit piecewise_construct_t() = default; };
@@ -25,5 +26,6 @@ extern _LIBCPP_EXPORTED_FROM_ABI const piecewise_construct_t piecewise_construct
 #endif
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_PIECEWISE_CONSTRUCT_H
diff --git a/libcxx/include/__utility/priority_tag.h b/libcxx/include/__utility/priority_tag.h
index e51ba6bfcc05..f33feef1c735 100644
--- a/libcxx/include/__utility/priority_tag.h
+++ b/libcxx/include/__utility/priority_tag.h
@@ -16,11 +16,13 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 template<size_t _Ip> struct __priority_tag : __priority_tag<_Ip - 1> {};
 template<> struct __priority_tag<0> {};
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_PRIORITY_TAG_H
diff --git a/libcxx/include/__utility/rel_ops.h b/libcxx/include/__utility/rel_ops.h
index 2577e94e91f6..0821c4fc414c 100644
--- a/libcxx/include/__utility/rel_ops.h
+++ b/libcxx/include/__utility/rel_ops.h
@@ -18,6 +18,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 namespace rel_ops
@@ -58,5 +59,6 @@ operator>=(const _Tp& __x, const _Tp& __y)
 } // namespace rel_ops
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_REL_OPS_H
diff --git a/libcxx/include/__utility/swap.h b/libcxx/include/__utility/swap.h
index f9e7f36678ba..57ca828f9737 100644
--- a/libcxx/include/__utility/swap.h
+++ b/libcxx/include/__utility/swap.h
@@ -19,6 +19,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #ifndef _LIBCPP_CXX03_LANG
@@ -46,5 +47,6 @@ swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::v
 }
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_SWAP_H
diff --git a/libcxx/include/__utility/to_underlying.h b/libcxx/include/__utility/to_underlying.h
index 3428406e8d3a..a224376e7da4 100644
--- a/libcxx/include/__utility/to_underlying.h
+++ b/libcxx/include/__utility/to_underlying.h
@@ -17,6 +17,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 #ifndef _LIBCPP_CXX03_LANG
@@ -36,5 +37,6 @@ to_underlying(_Tp __val) noexcept {
 #endif
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_TO_UNDERLYING_H
diff --git a/libcxx/include/__utility/transaction.h b/libcxx/include/__utility/transaction.h
index 87e51c0b198e..0dc3ae29e272 100644
--- a/libcxx/include/__utility/transaction.h
+++ b/libcxx/include/__utility/transaction.h
@@ -18,6 +18,7 @@
 #  pragma GCC system_header
 #endif
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 // __transaction is a helper class for writing code with the strong exception guarantee.
@@ -87,5 +88,6 @@ private:
 };
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 #endif // _LIBCPP___UTILITY_TRANSACTION_H
diff --git a/libcxx/include/regex b/libcxx/include/regex
index 456f34d45177..791dfd971d49 100644
--- a/libcxx/include/regex
+++ b/libcxx/include/regex
@@ -789,6 +789,7 @@ _LIBCPP_PUSH_MACROS
 
 #define _LIBCPP_REGEX_COMPLEXITY_FACTOR 4096
 
+_LIBCPP_DISABLE_DEBUG_INFO
 _LIBCPP_BEGIN_NAMESPACE_STD
 
 namespace regex_constants
@@ -6829,6 +6830,7 @@ regex_replace(const _CharT* __s,
 }
 
 _LIBCPP_END_NAMESPACE_STD
+_LIBCPP_ENABLE_DEBUG_INFO
 
 _LIBCPP_POP_MACROS
 
-- 
2.38.1.273.g43a17bfeac-goog

