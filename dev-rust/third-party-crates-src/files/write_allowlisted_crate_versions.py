#!/usr/bin/env python3
# Copyright 2022 The ChromiumOS Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Writes allowlisted crate names/versions into our ebuild.

This is intended to be the primary method for keeping our ebuild's allowlist
up-to-date.

FIXME(b/240953811): Remove this once our migration is done.
"""

import argparse
import logging
from pathlib import Path
import sys
from typing import List, Tuple

import migration_utils


def is_unmigrated_third_party_crate(ebuild_contents: str):
    """Returns True if this ebuild is an unmigrated third-party crate."""
    return migration_utils.MIGRATED_CRATE_MARKER not in ebuild_contents


def categorize_dev_rust_crates(dev_rust: Path) -> Tuple[List[str], List[str]]:
    """Returns customized crate names, and all other versions in dev_rust."""
    customized_crates = []
    present_crate_versions = []
    for subdir in dev_rust.iterdir():
        if not subdir.is_dir():
            continue

        dirents = list(subdir.iterdir())
        crate_name = subdir.name
        if any(x.name.endswith("-9999.ebuild") for x in dirents):
            logging.info("Skipping %s; it is a workon crate", crate_name)
            continue

        blocklistable = (
            crate_name not in migration_utils.CUSTOMIZATION_IGNORE_CRATES
        )
        is_crate_customized = False
        versions = []
        for maybe_ebuild in dirents:
            if maybe_ebuild.suffix != ".ebuild" or maybe_ebuild.is_symlink():
                continue

            ebuild_contents = maybe_ebuild.read_text(encoding="utf-8")
            if migration_utils.crate_has_customization(ebuild_contents):
                if not blocklistable:
                    logging.info(
                        "Found custom crate on blocklist_ignore: %s; skipping",
                        maybe_ebuild,
                    )
                    continue
                logging.info(
                    "Found customization in %s; marking as blocklisted crate.",
                    crate_name,
                )
                is_crate_customized = True
                break

            if not is_unmigrated_third_party_crate(ebuild_contents):
                continue

            crate_and_ver, _ = migration_utils.parse_crate_from_ebuild_stem(
                maybe_ebuild.stem
            )
            versions.append(crate_and_ver)

        if is_crate_customized:
            customized_crates.append(crate_name)
        else:
            present_crate_versions += versions

    customized_crates.sort()
    present_crate_versions.sort()
    return customized_crates, present_crate_versions


def update_allowlist(ebuild: Path, new_allowlist: List[str]):
    """Updates third-party-crates-src with new crate allowlists.

    Args:
        ebuild: ebuild to update.
        new_allowlist: Versions of crates to allow the installation of.
    """
    new_ebuild_lines = [
        x.rstrip() for x in ebuild.read_text(encoding="utf-8").splitlines()
    ]

    disclaimer_lines = [
        "\t# NOTE: This list was generated by",
        "\t# ${FILESDIR}/write_allowlisted_crate_versions.py. Any",
        "\t# modifications may be overwritten.",
    ]

    # We always want quoting here, and crate names/versions can't have quotes.
    allowlist_lines = [f'\t"{x}"' for x in new_allowlist]
    start = new_ebuild_lines.index("ALLOWED_CRATE_VERSIONS=(")
    end = new_ebuild_lines.index(")", start)

    new_ebuild_lines = (
        new_ebuild_lines[: start + 1]
        + disclaimer_lines
        + allowlist_lines
        + new_ebuild_lines[end:]
    )

    # Ensure there's exactly one newline at the end of this ebuild, to keep
    # presubmits happy.
    ebuild_text = "\n".join(new_ebuild_lines).rstrip() + "\n"
    ebuild.write_text(ebuild_text, encoding="utf-8")


def crate_to_portage_ver(crate_and_ver: str) -> Tuple[str, str]:
    """Converts a crate dirname to a portage package name + version."""
    crate_and_ver = crate_and_ver.replace(".beta-", "_beta")
    crate, ver = crate_and_ver.rsplit("-", 1)
    return crate, ver


def get_parser():
    """Constructs our arg parser."""
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    my_location = Path(__file__).parent
    dev_rust = my_location.parent.parent
    parser.add_argument("--dev-rust", type=Path, default=dev_rust)
    parser.add_argument(
        "--third-party-crates-ebuild",
        type=Path,
        default=my_location.parent / "third-party-crates-src-9999.ebuild",
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Use debug logging.",
    )
    parser.add_argument(
        "--rust-crates-path",
        type=Path,
        default=dev_rust.parent.parent / "rust_crates",
    )
    return parser


def main(argv: List[str]):
    """Main function."""
    opts = get_parser().parse_args(argv)
    logging.basicConfig(
        format=">> %(asctime)s: %(levelname)s: %(filename)s:%(lineno)d: "
        "%(message)s",
        level=logging.DEBUG if opts.debug else logging.INFO,
    )

    customized_crate_names, nonmigrated = categorize_dev_rust_crates(
        opts.dev_rust
    )

    customized_crate_names = set(customized_crate_names)
    nonmigrated = set(nonmigrated)

    vendor_dir = opts.rust_crates_path / "vendor"
    new_allowlist = []
    for crate_dir in vendor_dir.iterdir():
        if not crate_dir.is_dir():
            continue

        crate_dir_name = crate_dir.name
        portage_name, portage_ver = crate_to_portage_ver(crate_dir_name)
        if portage_name in customized_crate_names:
            logging.debug(
                "Skipping %s; portage package has customizations",
                crate_dir_name,
            )
            continue

        if f"{portage_name}-{portage_ver}" in nonmigrated:
            logging.debug(
                "Skipping %s, since it is not yet migrated", crate_dir_name
            )
            continue
        new_allowlist.append(crate_dir_name)

    new_allowlist.sort()
    update_allowlist(opts.third_party_crates_ebuild, new_allowlist)


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
