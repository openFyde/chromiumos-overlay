From c82fb879236292d653596753b96176e839d8709b Mon Sep 17 00:00:00 2001
From: Adhemerval Zanella <adhemerval.zanella@linaro.org>
Date: Fri, 1 Apr 2022 17:03:34 -0300
Subject: [PATCH 160/163] math: Do not use __builtin_isinf on clang

It does not handle pseudo normal numbers.
---
 math/math.h | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/math/math.h b/math/math.h
index 8e64e2eb4f..1cac405f67 100644
--- a/math/math.h
+++ b/math/math.h
@@ -1012,7 +1012,8 @@ enum
 
 /* Return nonzero value if X is positive or negative infinity.  */
 # if __HAVE_DISTINCT_FLOAT128 && !__GNUC_PREREQ (7,0) \
-     && !defined __SUPPORT_SNAN__ && !defined __cplusplus
+     && !defined __SUPPORT_SNAN__ && !defined __cplusplus \
+     && !defined __clang__
    /* Since __builtin_isinf_sign is broken for float128 before GCC 7.0,
       use the helper function, __isinff128, with older compilers.  This is
       only provided for C mode, because in C++ mode, GCC has no support
@@ -1021,8 +1022,7 @@ enum
 #  define isinf(x) \
     (__builtin_types_compatible_p (__typeof (x), _Float128) \
      ? __isinff128 (x) : __builtin_isinf_sign (x))
-# elif (__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__) \
-       || __glibc_clang_prereq (3,7)
+# elif (__GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__)
 #  define isinf(x) __builtin_isinf_sign (x)
 # else
 #  define isinf(x) __MATH_TG ((x), __isinf, (x))
-- 
2.37.2

